name: Build
on: [ push, pull_request ]

jobs:
  prepare:
    name: Prepare Build Variables
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.save_version.outputs.version }}
      VERSION_TYPE: ${{ steps.save_type.outputs.version_type }}
      PREVIOUS_VERSION_TAG: ${{ steps.save_tag.outputs.previous_version_tag }}
      CHANGES_IN_DOCS_ONLY: ${{ steps.save_changes.outputs.changes_in_docs_only }}

    steps:
      - name: Validate that a fork does not create a version tag
        if: "github.repository != 'BetonQuest/BetonQuest' && startsWith(github.ref,'refs/tags/v')"
        run: |
          echo "Version tags are not supported in forks!"
          exit 1
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Read version from pom.xml
        run: |
          MAVEN_VERSION=$(mvn help:evaluate -Dexpression=version -q -DforceStdout)
          echo "MAVEN_VERSION=$MAVEN_VERSION" >> $GITHUB_ENV
          echo "Collected the pom.xml version. The version is '$MAVEN_VERSION'"
      - name: Get the previous build-number tag from Development Build
        id: save_tag
        if: "github.repository == 'BetonQuest/BetonQuest' && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') || startsWith(github.ref,'refs/tags/v') )"
        run: |
          PREVIOUS_VERSION_TAG=$(git tag -l ${MAVEN_VERSION}-build-number-* | head -n 1)
          echo "PREVIOUS_VERSION_TAG=$PREVIOUS_VERSION_TAG" >> $GITHUB_ENV
          echo ::set-output name=previous_version_tag::$PREVIOUS_VERSION_TAG
          echo "Collected the previous build-number tag. The tag is '$PREVIOUS_VERSION_TAG'"
      - name: Check for difference in documentation only
        id: save_changes
        if: "github.repository == 'BetonQuest/BetonQuest' && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') )"
        run: |
          DIFF_OUTSIDE=$(git diff --quiet ${PREVIOUS_VERSION_TAG} -- . ':(exclude)documentation/' && echo Nothing || echo Changes)
          DIFF_INSIDE=$(git diff --quiet ${PREVIOUS_VERSION_TAG} -- documentation/ && echo Nothing || echo Changes)
          if [[ $DIFF_OUTSIDE == Nothing && $DIFF_INSIDE == Changes ]]; then CHANGES_IN_DOCS_ONLY=true; else CHANGES_IN_DOCS_ONLY=false; fi
          echo "CHANGES_IN_DOCS_ONLY=$CHANGES_IN_DOCS_ONLY" >> $GITHUB_ENV
          echo ::set-output name=changes_in_docs_only::$CHANGES_IN_DOCS_ONLY
          echo "Check for difference in documentation only. The value is '$CHANGES_IN_DOCS_ONLY'"
      - name: Generate build number for Development Build
        if: "github.repository == 'BetonQuest/BetonQuest' && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') ) && env.CHANGES_IN_DOCS_ONLY == 'false'"
        uses: einaregilsson/build-number@v3
        with:
          token: ${{ secrets.github_token }}
          prefix: ${{ env.MAVEN_VERSION }}
      - name: Set version for 'Release Build'
        if: "startsWith(github.ref,'refs/tags/v')"
        run: |
          TAG_VERSION=${GITHUB_REF:11}
          echo "Collected the tag version. The version is '$TAG_VERSION'"
          if [ $TAG_VERSION != $MAVEN_VERSION ]; then echo "::error::The version of the tag and the version of the pom are not equal! Tag is '$TAG_VERSION' and pom is '$MAVEN_VERSION'."; exit 1; fi
          echo "MAVEN_VERSION=$MAVEN_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=release" >> $GITHUB_ENV
      - name: Set version for 'Development Build'
        if: "github.repository == 'BetonQuest/BetonQuest' && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') )"
        run: |
          if [ $CHANGES_IN_DOCS_ONLY == true ]; then MAVEN_VERSION=${PREVIOUS_VERSION_TAG/build-number/DEV}; else MAVEN_VERSION=${MAVEN_VERSION}-DEV-${BUILD_NUMBER}; fi
          echo "MAVEN_VERSION=$MAVEN_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=developement" >> $GITHUB_ENV
      - name: Set version for 'Artifact Build'
        if: "github.repository != 'BetonQuest/BetonQuest' || !startsWith(github.ref,'refs/tags/v') && github.ref != 'refs/heads/master' && !startsWith(github.ref,'refs/heads/master_v')"
        run: |
          if [ ${{ github.repository }} != 'BetonQuest/BetonQuest' ]; then REPO=${{ github.repository }}-; fi
          MAVEN_VERSION=${MAVEN_VERSION}-DEV-ARTIFACT-${REPO}${{ github.run_number }}
          echo "MAVEN_VERSION=$MAVEN_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=artifact" >> $GITHUB_ENV
      - name: Save version to output variable
        id: save_version
        run: |
          echo "The version is '$MAVEN_VERSION'"
          echo ::set-output name=version::$MAVEN_VERSION
      - name: Save version type to output variable
        id: save_type
        run: |
          echo "The version type is '$VERSION_TYPE'"
          echo ::set-output name=version_type::$VERSION_TYPE

  build-artifacts:
    name: Build Artifacts
    needs: [ prepare ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          echo "VERSION=${{ needs.prepare.outputs.VERSION }}" >> $GITHUB_ENV
          echo "VERSION_TYPE=${{ needs.prepare.outputs.VERSION_TYPE }}" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}" >> $GITHUB_ENV
          echo "CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}" >> $GITHUB_ENV
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Setup JDK 1.8
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 8
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Remove SNAPSHOT version for Release Build
        if: "env.VERSION_TYPE == 'release'"
        run: |
          mvn versions:set -DremoveSnapshot
      - name: Set CHANGELOG.md version
        run: |
          sed -i "s~## \[Unreleased\]~## \[${VERSION}\]~g" ./CHANGELOG.md
      - name: Set plugin version
        run: |
          sed -i "s~\${maven-version}~${VERSION}~g" ./src/main/resources/plugin.yml
      - name: Activate lf line ending check in editorconfig
        run: |
          sed -i "s~#end_of_line = ~end_of_line = ~g" ./.editorconfig
      - name: Set mirror for all repositories in settings.xml
        uses: whelk-io/maven-settings-xml-action@v15
        with:
          mirrors: |
            [
              {
                "id": "betonquest-mirror",
                "mirrorOf": "*",
                "url": "https://betonquest.org/nexus/repository/default/"
              }
            ]
      - name: Build with Maven. Phase 'package'
        if: "github.event_name == 'pull_request'"
        run: |
          mvn -B package
      - name: Build with Maven. Phase 'verify'
        run: |
          mvn -B verify
          mkdir -p build/artifacts
          cp -r target/artifacts/* build/artifacts/
          git diff > build/artifacts/changes.patch
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: BetonQuest-Artifacts
          path: build/artifacts
